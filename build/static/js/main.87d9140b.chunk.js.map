{"version":3,"sources":["components/CurrentPrice.js","components/Prices.js","components/TodaysPrices.js","components/TomorrowsPrices.js","App.js","index.js"],"names":["CurrentPrice","currentPrice","useState","price","setPrice","date","setDate","time","setTime","useEffect","newTime","i","getCurrentTime","newDate","getCurrentDate","className","id","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Prices","todaysPrices","tomorrowsPrices","data","labels","Array","from","length","e","datasets","label","days","borderColor","backgroundColor","options","maintainAspectRatio","TodaysPrices","console","log","prices","TomorrowsPrices","App","setCurrentPrice","setTodaysPrices","setTomorrowsPrices","separate","setSeparate","query","handleData","a","fetch","method","headers","Authorization","body","JSON","stringify","then","res","json","getPrices","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87d9140b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CurrentPrice.css';\n\nconst CurrentPrice = ({ currentPrice }) => {\n\tconst [price, setPrice] = useState(null);\n\tconst [date, setDate] = useState(null);\n\tconst [time, setTime] = useState(null);\n\n\tconst getCurrentPrice = () => {\n\t\tsetPrice(currentPrice['total']);\n\t};\n\n\tconst getCurrentDate = () => {\n\t\tlet newDate = '';\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tnewDate = newDate + currentPrice['startsAt'][i];\n\t\t}\n\t\tsetDate(newDate);\n\t};\n\n\tconst getCurrentTime = () => {\n\t\tlet newTime = '';\n\t\tfor (let i = 11; i < 16; i++) {\n\t\t\tnewTime = newTime + currentPrice['startsAt'][i];\n\t\t}\n\t\tsetTime(newTime);\n\t};\n\n\tuseEffect(() => {\n\t\tgetCurrentPrice();\n\t\tgetCurrentTime();\n\t\tgetCurrentDate();\n\t}, []);\n\treturn (\n\t\t<div className='currentPrice'>\n\t\t\t<h2 id={price > 3 ? 'highPrice' : ''}>{price}kr</h2>\n\t\t\t<h4>\n\t\t\t\tat {time} on {date}\n\t\t\t</h4>\n\t\t</div>\n\t);\n};\n\nexport default CurrentPrice;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n\tChart as ChartJS,\n\tCategoryScale,\n\tLinearScale,\n\tPointElement,\n\tLineElement,\n\tTitle,\n\tTooltip,\n\tLegend,\n} from 'chart.js';\nimport './Prices.css';\n\nChartJS.register(\n\tCategoryScale,\n\tLinearScale,\n\tPointElement,\n\tLineElement,\n\tTitle,\n\tTooltip,\n\tLegend\n);\n\nconst Prices = ({ todaysPrices, tomorrowsPrices }) => {\n\tconst labels = Array.from({ length: 24 }, (e, i) => i);\n\n\tconst todaysPriceArr = Array.from(todaysPrices, (days) => {\n\t\treturn days['total'];\n\t});\n\tconst tomorrowsPriceArr = Array.from(tomorrowsPrices, (days) => {\n\t\treturn days['total'];\n\t});\n\n\tconst data = {\n\t\tlabels,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: \"Today's Prices\",\n\t\t\t\tdata: todaysPriceArr,\n\t\t\t\tborderColor: 'rgb(255, 99, 132)',\n\t\t\t\tbackgroundColor: 'rgba(255, 99, 132, 0.5)',\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Tomorrow's Prices\",\n\t\t\t\tdata: tomorrowsPriceArr,\n\t\t\t\tborderColor: 'rgb(53, 162, 235)',\n\t\t\t\tbackgroundColor: 'rgba(53, 162, 235, 0.5)',\n\t\t\t},\n\t\t],\n\t};\n\treturn (\n\t\t<div className='prices'>\n\t\t\t{data && (\n\t\t\t\t<div className='chartContainer' id='join'>\n\t\t\t\t\t<Line data={data} options={{ maintainAspectRatio: false }} />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Prices;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n\tChart as ChartJS,\n\tCategoryScale,\n\tLinearScale,\n\tPointElement,\n\tLineElement,\n\tTitle,\n\tTooltip,\n\tLegend,\n} from 'chart.js';\nimport './TodaysPrices.css';\n\nChartJS.register(\n\tCategoryScale,\n\tLinearScale,\n\tPointElement,\n\tLineElement,\n\tTitle,\n\tTooltip,\n\tLegend\n);\n\nconst TodaysPrices = ({ todaysPrices }) => {\n\tconst labels = Array.from({ length: 24 }, (e, i) => i);\n\tconsole.log(labels);\n\n\tconst prices = Array.from(todaysPrices, (days) => {\n\t\treturn days['total'];\n\t});\n\tconsole.log(prices);\n\n\tconst data = {\n\t\tlabels,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: \"Today's Prices\",\n\t\t\t\tdata: prices,\n\t\t\t\tborderColor: 'rgb(255, 99, 132)',\n\t\t\t\tbackgroundColor: 'rgba(255, 99, 132, 0.5)',\n\t\t\t},\n\t\t],\n\t};\n\treturn (\n\t\t<div className='todaysPrices'>\n\t\t\t{data && (\n\t\t\t\t<div className='chartContainer'>\n\t\t\t\t\t<Line data={data} options={{ maintainAspectRatio: true }} />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default TodaysPrices;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n\tChart as ChartJS,\n\tCategoryScale,\n\tLinearScale,\n\tPointElement,\n\tLineElement,\n\tTitle,\n\tTooltip,\n\tLegend,\n} from 'chart.js';\nimport './TomorrowsPrices.css';\n\nChartJS.register(\n\tCategoryScale,\n\tLinearScale,\n\tPointElement,\n\tLineElement,\n\tTitle,\n\tTooltip,\n\tLegend\n);\n\nconst TomorrowsPrices = ({ tomorrowsPrices }) => {\n\tconst labels = Array.from({ length: 24 }, (e, i) => i);\n\tconsole.log(labels);\n\n\tconst prices = Array.from(tomorrowsPrices, (days) => {\n\t\treturn days['total'];\n\t});\n\tconsole.log(prices);\n\n\tconst data = {\n\t\tlabels,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: \"Tomorrow's Prices\",\n\t\t\t\tdata: prices,\n\t\t\t\tborderColor: 'rgb(53, 162, 235)',\n\t\t\t\tbackgroundColor: 'rgba(53, 162, 235, 0.5)',\n\t\t\t},\n\t\t],\n\t};\n\treturn (\n\t\t<div className='tomorrowsPrices'>\n\t\t\t{data && (\n\t\t\t\t<div className='chartContainer'>\n\t\t\t\t\t<Line data={data} options={{ maintainAspectRatio: true }} />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default TomorrowsPrices;\n","import './App.css';\nimport CurrentPrice from './components/CurrentPrice';\nimport Prices from './components/Prices';\nimport TodaysPrices from './components/TodaysPrices';\nimport TomorrowsPrices from './components/TomorrowsPrices';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n\tconst [currentPrice, setCurrentPrice] = useState(null);\n\tconst [todaysPrices, setTodaysPrices] = useState(null);\n\tconst [tomorrowsPrices, setTomorrowsPrices] = useState(null);\n\tconst [separate, setSeparate] = useState(false);\n\n\tconst doSeparation = () => {\n\t\tif (separate) {\n\t\t\tsetSeparate(false);\n\t\t} else {\n\t\t\tsetSeparate(true);\n\t\t}\n\t};\n\n\tconst query = `query{\n\t\tviewer {\n\t\t\thomes {\n\t\t\t\tcurrentSubscription{\n\t\t\t\t\tpriceInfo{\n\t\t\t\t\t\tcurrent{\n\t\t\t\t\t\t\ttotal\n\t\t\t\t\t\t\tenergy\n\t\t\t\t\t\t\ttax\n\t\t\t\t\t\t\tstartsAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttoday {\n\t\t\t\t\t\t\ttotal\n\t\t\t\t\t\t\tenergy\n\t\t\t\t\t\t\ttax\n\t\t\t\t\t\t\tstartsAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttomorrow {\n\t\t\t\t\t\t\ttotal\n\t\t\t\t\t\t\tenergy\n\t\t\t\t\t\t\ttax\n\t\t\t\t\t\t\tstartsAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n  }`;\n\n\tfunction handleData(data) {\n\t\tconsole.log(data);\n\t\tsetTodaysPrices(\n\t\t\tdata['viewer']['homes'][0]['currentSubscription']['priceInfo']['today']\n\t\t);\n\t\tsetTomorrowsPrices(\n\t\t\tdata['viewer']['homes'][0]['currentSubscription']['priceInfo']['tomorrow']\n\t\t);\n\t\tsetCurrentPrice(\n\t\t\tdata['viewer']['homes'][0]['currentSubscription']['priceInfo']['current']\n\t\t);\n\t}\n\n\tasync function getPrices() {\n\t\tconsole.log('Submitting');\n\t\tlet response = fetch('https://api.tibber.com/v1-beta/gql', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: 'Bearer QjAfeE7K_2jwxTx0k0TeSd7B_LUZjgYCqd-51M8BAtg',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ query }),\n\t\t});\n\t\tresponse.then((res) => res.json()).then((data) => handleData(data['data']));\n\t}\n\n\tuseEffect(() => {\n\t\tgetPrices();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconsole.log(currentPrice);\n\t\tconsole.log(todaysPrices);\n\t\tconsole.log(tomorrowsPrices);\n\t}, [currentPrice]);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{currentPrice && <CurrentPrice currentPrice={currentPrice} />}\n\t\t\t{todaysPrices && tomorrowsPrices && !separate && (\n\t\t\t\t<Prices todaysPrices={todaysPrices} tomorrowsPrices={tomorrowsPrices} />\n\t\t\t)}\n\t\t\t{todaysPrices && separate && <TodaysPrices todaysPrices={todaysPrices} />}\n\t\t\t{tomorrowsPrices && separate && (\n\t\t\t\t<TomorrowsPrices tomorrowsPrices={tomorrowsPrices} />\n\t\t\t)}\n\t\t\t<button\n\t\t\t\tclassName={'separationButton'}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdoSeparation();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{separate ? 'Join' : 'Separate'}\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}